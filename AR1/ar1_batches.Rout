
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(16235, kind = "L'Ecuyer-CMRG" )
> source("batchSizes.R")
> source("../backFuncs.R")
> #%-------------------------------------------------
> pkgs <- c("doParallel", "Matrix", "ts.extend", "mAr", "mcmcse")
> 
>  if(sum(as.numeric(!pkgs %in% installed.packages())) != 0) {
+     installer <- pkgs[!pkgs %in% installed.packages()]
+     for(i in 1:length(installer)) {
+       install.packages(installer, dependencies = T)
+       break()}
+     sapply(pkgs, require, character = T)
+   } else {
+     sapply(pkgs, require, character = T)
+   }
Loading required package: doParallel
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
Loading required package: Matrix
Loading required package: ts.extend
Loading required package: mAr
Loading required package: MASS
Loading required package: mcmcse
doParallel     Matrix  ts.extend        mAr     mcmcse 
      TRUE       TRUE       TRUE       TRUE       TRUE 
> 
> #%-------------------------------------------------
> # Simulation settings
> p <- 1
> rho <- seq(0.95, 0.998, by = 0.002)
> n <- 5e3
> nrep <- 1 # increase for estimation
> omega <- diag(p)
> #%-------------------------------------------------
> 
> true_Sigmas  <- list(length = length(rho))
> phis		 <- list(length = length(rho))
> sims_for_rho <- list(length = length(rho))
> # generating VAR(1) process
> 
> detectCores()
[1] 8
> 
> # leave 2 cores free for computer to work well
> # this way you can walk Netflix and run code!
> 
> # this tells the machine to register the 4 cores
> registerDoParallel(cores = detectCores()-2)
> 
> # for all values of rho
> for(s in 1:length(rho))
+ {
+ 	print(paste("Doing rho = ", rho[s]))
+ 	temp 	<- sigphi(p, rho[s])
+ 	phis[[s]] 	<- temp[[1]]
+ 	true_Sigmas[[s]] 	<- temp[[2]]
+ 
+ 	## a doParallel for reps
+ 	sims_for_rho[[s]] 	<- foreach(st = 1:nrep) %dopar% 
+ 	{
+ 		chain <- as.matrix(ar1(N = n, phi = phis[[s]][1,1], omega = omega[1,1], start = 0))
+ 		est_var(chain = chain, phi = phis[[s]], Sigma = true_Sigmas[[s]])
+ 	}	
+ }
[1] "Doing rho =  0.95"
[1] "Doing rho =  0.952"
[1] "Doing rho =  0.954"
[1] "Doing rho =  0.956"
[1] "Doing rho =  0.958"
[1] "Doing rho =  0.96"
[1] "Doing rho =  0.962"
[1] "Doing rho =  0.964"
[1] "Doing rho =  0.966"
[1] "Doing rho =  0.968"
[1] "Doing rho =  0.97"
[1] "Doing rho =  0.972"
[1] "Doing rho =  0.974"
[1] "Doing rho =  0.976"
[1] "Doing rho =  0.978"
[1] "Doing rho =  0.98"
[1] "Doing rho =  0.982"
[1] "Doing rho =  0.984"
[1] "Doing rho =  0.986"
[1] "Doing rho =  0.988"
[1] "Doing rho =  0.99"
[1] "Doing rho =  0.992"
[1] "Doing rho =  0.994"
[1] "Doing rho =  0.996"
[1] "Doing rho =  0.998"
> 
> save(file = "ar1_batch", sims_for_rho, phis, true_Sigmas, rho)
> 
> 
> 
> proc.time()
   user  system elapsed 
  4.727   0.175   5.132 
